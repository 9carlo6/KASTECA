<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">


<module name="Checker">

    <property name="charset" value="UTF-8"/>

    <property name="severity" value="warning"/>

    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Per escludere alcuni moduli -->
    <!-- In questo caso si esclude il modulo 'module-info.java' -->
    <!--<module name="ExclusionFilter">
        <property name="fileNamePattern" value="module\-info\-java$"/>
    </module>-->

    <!-- Controllo di violazione di Size (https://checkstyle.sourceforge.io/config_sizes.html) -->
    <module name="FileLength">
        <property name="max" value="3000"></property>
        <property name="fileExtensions" value="3000"></property>
    </module>

    <!-- FileSetCheck TreeWalker checks individual Java source files and defines properties that are applicable to checking such files -->
    <module name="TreeWalker">
        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="ArrayTypeStyle"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator"> <!--Checks for empty line separators after header, package, all import declarations, fields, constructors, methods, nested classes, static initializers and instance initializers-->
            <property
                name="tokens"
                value= "PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
            <!-- To allow no empty line between fields: -->
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <!-- Checks that method parameter names conform to a specified pattern.
        By using accessModifiers property it is possible to specify different
        formats for methods at different visibility levels -->
        <module name="ParameterName"> <!-- To validate parameters use ParameterName -->
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
        </module>
        <module name="LambdaParameterName"> <!-- To validate lambda parameters use LambdaParameterName -->
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
        </module>
        <module name="CatchParameterName"> <!-- To validate catch parameters use CatchParameterName -->
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
        </module>
        <module name="LocalVariableName"> <!-- To validate variable parameters use LocalVariableName -->
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
        </module>
        <module name=" ClassTypeParameterNameCheck"> <!-- Checks that class type parameter names conform to a specified pattern -->
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-z0-9]*[T]$)"/>
        </module>
        <module name=" MethodTypeParameterNameCheck"> <!-- Checks that method type parameter names conform to a specified pattern -->
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-z0-9]*[T]$)"/>
        </module>

    </module>
</module>
